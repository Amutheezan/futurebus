This program should be regarded as a DEBUGGING aid, not as a 
certifier of correctness.
Call with the -l flag or read the license file for terms
and conditions of use.
Run this program with "-h" for the list of options.

Bugs, questions, and comments should be directed to
"murphi@verify.stanford.edu".

Murphi compiler last modified date: Jan 29 1999
Include files   last modified date: Jan 29 1999
==========================================================================

==========================================================================
Murphi Release 3.1
Finite-state Concurrent System Verifier.

Copyright (C) 1992 - 1999 by the Board of Trustees of
Leland Stanford Junior University.

==========================================================================

Protocol: futurebus_fix

Algorithm:
	Verification by breadth first search.
	with symmetry algorithm 3 -- Heuristic Small Memory Normalization
	with permutation trial limit 10.

Memory usage:

	* The size of each state is 104 bits (rounded up to 16 bytes).
	* The memory allocated for the hash table and state queue is
	  8 Mbytes.
	  With two words of overhead per state, the maximum size of
	  the state space is 392159 states.
	   * Use option "-k" or "-m" to increase this, if necessary.
	* Capacity in queue for breadth-first search: 39215 states.
	   * Change the constant gPercentActiveStates in mu_prolog.inc
	     to increase this, if necessary.

Warning: No trace will not be printed in the case of protocol errors!
         Check the options if you want to have error traces.

==========================================================================

Status:

	No error found.

State Space Explored:

	476 states, 3233 rules fired in 0.10s.

Rules Information:

	Fired 35 times	- Rule "Read data from Exclusive states, i:Proc_1"
	Fired 19 times	- Rule "Read data from Exclusive states, i:Proc_2"
	Fired 9 times	- Rule "Read data from Exclusive states, i:Proc_3"
	Fired 4 times	- Rule "Go to Exclusive state on DACK, i:Proc_1"
	Fired 5 times	- Rule "Go to Exclusive state on DACK, i:Proc_2"
	Fired 3 times	- Rule "Go to Exclusive state on DACK, i:Proc_3"
	Fired 3 times	- Rule "Go to Shared state on DACKem, i:Proc_1"
	Fired 4 times	- Rule "Go to Shared state on DACKem, i:Proc_2"
	Fired 2 times	- Rule "Go to Shared state on DACKem, i:Proc_3"
	Fired 3 times	- Rule "Go to Shared state on DACK, i:Proc_1"
	Fired 4 times	- Rule "Go to Shared state on DACK, i:Proc_2"
	Fired 2 times	- Rule "Go to Shared state on DACK, i:Proc_3"
	Fired 97 times	- Rule "Go to Shared state on DACK, i:Proc_1"
	Fired 141 times	- Rule "Go to Shared state on DACK, i:Proc_2"
	Fired 72 times	- Rule "Go to Shared state on DACK, i:Proc_3"
	Fired 21 times	- Rule "Go to Shared state on DACK, i:Proc_1"
	Fired 61 times	- Rule "Go to Shared state on DACK, i:Proc_2"
	Fired 81 times	- Rule "Go to Shared state on DACK, i:Proc_3"
	Fired 116 times	- Rule "Go to Pending Shared state, i:Proc_1"
	Fired 120 times	- Rule "Go to Pending Shared state, i:Proc_2"
	Fired 98 times	- Rule "Go to Pending Shared state, i:Proc_3"
	Fired 50 times	- Rule "Read data from EM, i:Proc_1"
	Fired 51 times	- Rule "Read data from EM, i:Proc_2"
	Fired 44 times	- Rule "Read data from EM, i:Proc_3"
	Fired 91 times	- Rule "Read shared data, i:Proc_1"
	Fired 56 times	- Rule "Read shared data, i:Proc_2"
	Fired 16 times	- Rule "Read shared data, i:Proc_3"
	Fired 19 times	- Rule "Moved to shared state from EMR on DACKem, i:Proc_1"
	Fired 35 times	- Rule "Moved to shared state from EMR on DACKem, i:Proc_2"
	Fired 36 times	- Rule "Moved to shared state from EMR on DACKem, i:Proc_3"
	Fired 101 times	- Rule "Trying to read data (pending), i:Proc_1"
	Fired 146 times	- Rule "Trying to read data (pending), i:Proc_2"
	Fired 75 times	- Rule "Trying to read data (pending), i:Proc_3"
	Fired 190 times	- Rule "Trying to read data, i:Proc_1"
	Fired 61 times	- Rule "Trying to read data, i:Proc_2"
	Fired 9 times	- Rule "Trying to read data, i:Proc_3"
	Fired 6 times	- Rule "Trying to write data (pending), v:Value_1, i:Proc_1"
	Fired 26 times	- Rule "Trying to write data (pending), v:Value_1, i:Proc_2"
	Fired 46 times	- Rule "Trying to write data (pending), v:Value_1, i:Proc_3"
	Fired 190 times	- Rule "Trying to write data, v:Value_1, i:Proc_1"
	Fired 61 times	- Rule "Trying to write data, v:Value_1, i:Proc_2"
	Fired 9 times	- Rule "Trying to write data, v:Value_1, i:Proc_3"
	Fired 16 times	- Rule "Write data, on DACKemw, v:Value_1, i:Proc_1"
	Fired 73 times	- Rule "Write data, on DACKemw, v:Value_1, i:Proc_2"
	Fired 124 times	- Rule "Write data, on DACKemw, v:Value_1, i:Proc_3"
	Fired 16 times	- Rule "Write data, on DACK, v:Value_1, i:Proc_1"
	Fired 73 times	- Rule "Write data, on DACK, v:Value_1, i:Proc_2"
	Fired 124 times	- Rule "Write data, on DACK, v:Value_1, i:Proc_3"
	Fired 3 times	- Rule "Invalidate, on DACKemw, v:Value_1, i:Proc_1"
	Fired 25 times	- Rule "Invalidate, on DACKemw, v:Value_1, i:Proc_2"
	Fired 126 times	- Rule "Invalidate, on DACKemw, v:Value_1, i:Proc_3"
	Fired 34 times	- Rule "Trying to write data, v:Value_1, i:Proc_1"
	Fired 41 times	- Rule "Trying to write data, v:Value_1, i:Proc_2"
	Fired 134 times	- Rule "Trying to write data, v:Value_1, i:Proc_3"
	Fired 126 times	- Rule "Write data, v:Value_1, i:Proc_1"
	Fired 75 times	- Rule "Write data, v:Value_1, i:Proc_2"
	Fired 25 times	- Rule "Write data, v:Value_1, i:Proc_3"
